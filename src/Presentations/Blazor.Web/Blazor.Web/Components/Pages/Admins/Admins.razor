@page "/admins"
@namespace Blazor.Web
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Admins</PageTitle>
<FluentStack VerticalGap="15" Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical">
    <FluentCard AreaRestricted="false">
        <FluentToolbar id="toolbar-fluent-components-two" style="width:100%">
            <FluentButton IconStart="@(new Icons.Regular.Size24.AddCircle())" Appearance="Appearance.Accent" OnClick="async () => await AddAdminDialog()">Add new admin</FluentButton>
@*             <FluentLabel Typo="Typography.Subject">
                @Users?.Count() <FluentIcon Value="@(new Icons.Regular.Size20.People())" />
            </FluentLabel>
            <FluentLabel Typo="Typography.Subject">
                @Users?.Where(x => x.IsFullyPaid).Count() <FluentIcon Value="@(new Icons.Regular.Size20.PeopleMoney())" Color="Color.Success" />
            </FluentLabel>
            <FluentLabel Typo="Typography.Subject">
                @Users?.Where(x => !x.IsFullyPaid).Count() <FluentIcon Value="@(new Icons.Regular.Size20.PeopleError())" Color="Color.Error" />
            </FluentLabel> *@
@*             <FluentCombobox slot="end" 
                            Items=@Users?.Select(x => x.FirstName).ToList() 
                            @bind-Value="@SearchText" 
                            TOption="string" 
                            Height="200px" 
                            Placeholder="Search admin first name"
                            Autocomplete="ComboboxAutocomplete.Both" /> *@
        </FluentToolbar>
    </FluentCard>

    @if (Users == null)
    {
        <FluentProgressRing/>
    }
    else
    {
        <FluentCard>
                <FluentDataGrid Id="adminsgrid" 
                                Style="overflow:auto;" 
                                ResizableColumns=true 
                                Items=@Users 
                                GridTemplateColumns="3.5fr 2.2fr 2.2fr 2.2fr 6fr 3fr 2.8fr" 
                                TGridItem=AdminWithPayment>
                    <TemplateColumn Title="Avatar">
                        <FluentPersona Name="@context.UserName"
                                       Status="@StatusConverter(context.IsFullyPaid)"
                                       StatusSize="PresenceBadgeSize.Small"
                                       StatusTitle="@StatusTextConverter(context.IsFullyPaid)"
                                       Image="@context.ProfileImageUrl"
                                       ImageSize="30px">
                        </FluentPersona>
                    </TemplateColumn>
@*                     <PropertyColumn Title="Phase" Property="@(c => c!.Phase)" Sortable="true" Align=Align.Center />
                    <PropertyColumn Title="Block" Property="@(c => c!.Block)" Sortable="true" Align=Align.Center />
                    <PropertyColumn Title="Lot" Property="@(c => c!.Lot)" Sortable="true" Align=Align.Center />
                    <PropertyColumn Title="Lot size" Property="@(c => c!.LotSize)" Sortable="true" Align=Align.Start/> *@
                    <PropertyColumn Title="First name" Property="@(c => c!.FirstName)" Sortable="true" Align=Align.Start/>
                    <PropertyColumn Title="Middle name" Property="@(c => c!.MiddleName)" Sortable="true" Align=Align.Start/>
                    <PropertyColumn Title="Last name" Property="@(c => c!.LastName)" Sortable="true" Align=Align.Start/>

                    <TemplateColumn Title="Email" Align=Align.Start>
                        <FluentButton @onclick=@(async () => await CopyToClipboard(context.Email!))>@context.Email</FluentButton>
                    </TemplateColumn>
                    @* <PropertyColumn Title="Street" Property="@(c => c!.Street)" Sortable="true" Align=Align.Start /> *@
                    <PropertyColumn Title="Phone number" Property="@(c => c!.PhoneNumber)" Sortable="true" Align=Align.Start/>
                    @* <PropertyColumn Title="Move in" Property="@(c => c!.CreatedAt.ToString("dd/MM/yy"))" Sortable="true" Align=Align.Start/> *@
                    <TemplateColumn Title="Actions" Align=Align.Center>
                        <FluentStack>@* 
                            <FluentButton IconStart="@(new Icons.Regular.Size24.Copy())" Appearance="Appearance.Outline" @onclick=@(async () => await CopyToClipboard(context.Id)) /> *@
                            <FluentButton IconStart="@(new Icons.Regular.Size24.Delete())" Appearance="Appearance.Outline" @onclick=@(async () => await Delete(context))/>
                            <FluentButton IconStart="@(new Icons.Regular.Size24.KeyReset())" Appearance="Appearance.Outline" @onclick=@( async () => await ResetToDefaultPasswordAsync(context)) />
                        </FluentStack>
                    </TemplateColumn>
                </FluentDataGrid>
            <br/>
            <div>
                <FluentStack HorizontalGap="5">
                    @for (int i = 1; i <= PaginationCount; i++)
                    {
                        int currentPage = i;
                        <FluentButton Appearance="PageButtonAppearance(currentPage)" @onclick="@( async () => {
                            await RefreshAsync(currentPage);
                            CurrentPage = currentPage;
                        })">@currentPage</FluentButton>
                    }
                </FluentStack>
            </div>
        </FluentCard>
    }
</FluentStack>
