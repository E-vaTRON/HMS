@implements IDialogContentComponent<AddBillDialogParameter>
@namespace Blazor.Web
@inject IUsersRepository UsersRepository
@inject IRequestRepository RequestRepository
@using System.Globalization

<FluentDialogBody>
    <FluentGrid Spacing="3" Justify="JustifyContent.FlexStart">
        <FluentGridItem xs="12" sm="4">
            <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical">
                <FluentTextField @bind-Value="@requestGuid"
                                 Required Style="width: 100%"
                                 @onfocusout=@(async () => await CheckRequestGuid())>
                    <FluentIcon Value="@(new Icons.Regular.Size20.TicketDiagonal())" Slot="start" Color="Color.Neutral" />
                    Request Id:
                </FluentTextField>
                <FluentTextField @bind-Value="@userGuid"
                                 Required ReadOnly="@(Content.SelectedRequest is not null)" Style="width: 100%;"
                                 @onfocusout=@(async () => await CheckUserGuid())>
                    <FluentIcon Value="@(new Icons.Regular.Size16.ContactCard())" Slot="start" Color="Color.Neutral" />
                    User Id:
                </FluentTextField>
                @if (Content.SelectedUser is null || !Content.IsUserIdValid)
                {
                        <span style="color: red;">@errorMessage</span>
                }
                else
                {
                    var validUser = Content?.SelectedUser;
                    @if (validUser is not null)
                    {
                        <FluentCard>
                            <FluentPersona Name="@(Content?.SelectedUser.Email)"
                                           Status="PresenceStatus.Available"
                                           Image="@(Content?.SelectedUser.ProfileImageUrl)"
                                           StatusTitle="You are online"
                                           ImageSize="35px" />
                        </FluentCard>
                    }
                }
                <FluentCard>
                    <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal">
                        <FluentLabel>
                            Symptom:
                        </FluentLabel>
                        @if (@Content!.SelectedRequest is not null)
                        {
                            var symptomIds = Content.SelectedRequest.Symptoms.Split(',').Select(s => s.Trim()).ToList();
                            <FluentStack>
                                @foreach (var symptom in @Content!.Symptoms.Where(x => symptomIds.Contains(x.Id)))
                                {
                                    <FluentBadge Fill="somevalue" BackgroundColor="Gray" Color="white">
                                        @symptom.Name
                                    </FluentBadge>
                                }
                            </FluentStack>
                        }
                        else
                        {
                            <FluentBadge Fill="somevalue" BackgroundColor="Black" Color="white">
                                No request were found
                            </FluentBadge>
                        }
                    </FluentStack>
                </FluentCard>
                
                <FluentDatePicker Label="Deadline" Value="@selectedDate" ValueChanged="HandleDatePickerValueChanged" />
                @if (!Content.IsDeadlineValid)
                {
                    <FluentBadge Fill="somevalue" BackgroundColor="red" Color="white">
                            Please provide a deadline for this bill
                    </FluentBadge>
                }
                <FluentButton Appearance="Appearance.Accent" @onclick=ValidateBill>Validate bill</FluentButton>
            </FluentStack>
        </FluentGridItem>
        <FluentGridItem xs="12" sm="8">
            <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical" VerticalGap="20">
                <FluentAutocomplete Id="my-customized"
                            @ref="Services"
                            TOption="Service"
                            Width="100%"
                            Placeholder="Search services"
                            OnOptionsSearch="@OnSearch"
                            MaximumSelectedOptions="6"
                            OptionText="@(item => item.Name)"
                            OptionStyle="min-height: 40px;"
                            ValueChanged="@UpdateQuantityList"
                            Style="width: 100%;"
                            @bind-SelectedOptions="@Content.SelectedServices">

                    <LabelTemplate>
                        Select services <FluentIcon Value="@(new Icons.Regular.Size20.ServiceBell())" />
                    </LabelTemplate>

                    <SelectedOptionTemplate>
                        <FluentBadge Appearance="Appearance.Neutral"
                                        Fill="somevalue"
                                        BackgroundColor="@context.Color"
                                        Color="white"
                                        OnDismissClick="@(async () => await Services.RemoveSelectedItemAsync(context))">
                            @context.Name
                        </FluentBadge>
                    </SelectedOptionTemplate>

                    @* Template used with each Option items *@
                    <OptionTemplate>
                        <FluentBadge Appearance="Appearance.Neutral"
                                        Fill="somevalue"
                                        BackgroundColor="@context.Color"
                                        Color="white">
                            @context.Name
                        </FluentBadge>
                    </OptionTemplate>

                    @* Template used when the maximum number of selected items (MaximumSelectedOptions) has been reached *@
                    <MaximumSelectedOptionsMessage>
                        The maximum number of selected items has been reached.
                    </MaximumSelectedOptionsMessage>

                    @* Content display at the top of the Popup area *@
                    <HeaderContent>
                        <FluentLabel Color="Color.Accent"
                                        Style="padding: 8px; font-size: 11px; border-bottom: 1px solid var(--neutral-fill-stealth-hover);">
                            Suggested services
                        </FluentLabel>
                    </HeaderContent>

                    @* Content display at the bottom of the Popup area *@
                    <FooterContent>
                        @if (!Content.SelectedServices.Any())
                        {
                            <FluentLabel Style="font-size: 11px; text-align: center; width: 200px;">
                                No services found
                            </FluentLabel>
                        }
                    </FooterContent>
                </FluentAutocomplete>
                @if (Content.SelectedServicesWithQuantity.Any())
                {
                    <FluentCard AreaRestricted="false">
                        <FluentTabs @bind-ActiveTabId="@SelectedServiceTab"
                                    Style="width: 100%; height: 100%;">
                            @foreach (var selectedService in Content.SelectedServicesWithQuantity)
                            {
                                <FluentTab Id="@($"tab-{selectedService.Name}")"                                           
                                           @bind-Label="@selectedService.Name"
                                           Data="@selectedService" 
                                           Style="width: 100%; height: 100%;">
                                    <FluentDivider Style="margin-top:10px; margin-bottom:10px;" />
                                    <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical" VerticalGap="10">
                                        <FluentCombobox Label="Choose room"
                                                        Multiple="false"
                                                        TOption="string"
                                                        Height="200px"
                                                        Autocomplete="ComboboxAutocomplete.Both"
                                                        Items="@Content.Rooms?.Select(x => x.Name).ToList()"
                                                        SelectedOptionChanged="@(async(roomName) => await SelectRoomAsync(roomName, selectedService.Id.ToString()))" />
                                        @if (selectedService.SelectedRoom != null)
                                        {
                                            <FluentGrid Style="width: 100%; height: 100%">
                                                <FluentGridItem xs="12" sm="4" >
                                                    <FluentDatePicker Label="Start Date" 
                                                                      Style="width: 100%;"
                                                                      DisabledDateFunc="ValidateSelectDate"
                                                                      @bind-Value="@selectedService.SelectedRoom.StartDate"
                                                                      @onfocusout="@(() => OnTimeSelectedChanged(selectedService.SelectedRoom))" />
                                                </FluentGridItem>
                                                <FluentGridItem xs="12" sm="4" >
                                                    <FluentTimePicker Label="Start Time" 
                                                                      Style="width: 100%;" 
                                                                      @bind-Value="@selectedService.SelectedRoom.StartDate"
                                                                      @onfocusout="@(() => OnTimeSelectedChanged(selectedService.SelectedRoom))" />
                                                </FluentGridItem>
                                                <FluentGridItem xs="12" sm="4">
                                                    <FluentSelect TOption="string"
                                                                  Label="Duration"
                                                                  Width="100%"
                                                                  @bind-Value="@selectedService.SelectedRoom.Duration"
                                                                  @onfocusout="@(() => OnTimeSelectedChanged(selectedService.SelectedRoom))">
                                                        <FluentOption Value="0"> </FluentOption>
                                                        <FluentOption Value="30">30 minutes</FluentOption>
                                                        <FluentOption Value="60">1 hour</FluentOption>
                                                        <FluentOption Value="120">2 hours</FluentOption>
                                                        <FluentOption Value="180">3 hours</FluentOption>
                                                        <FluentOption Value="240">4 hours</FluentOption>
                                                        <FluentOption Value="300">5 hours</FluentOption>
                                                        <FluentOption Value="360">6 hours</FluentOption>
                                                    </FluentSelect>
                                                </FluentGridItem>
                                                <FluentGridItem xs="12" sm="12">
                                                    @if (selectedService.SelectedRoom.StartDate.HasValue && selectedService.SelectedRoom.Duration is not null)
                                                    {
                                                        var selectedStartTime = selectedService.SelectedRoom.StartDate.Value;
                                                        var selectedDuration = selectedService.SelectedRoom.Duration;
                                                        var selectedEndTime = selectedStartTime.AddMinutes(double.Parse(selectedDuration));

                                                        @if (selectedEndTime.Date < selectedStartTime.Date)
                                                        {
                                                            <p style="color: red;">End date cannot be before the start date.</p>
                                                        }
                                                        else if (selectedEndTime < selectedStartTime)
                                                        {
                                                            <p style="color: red;">End time cannot be before the start time.</p>
                                                        }
                                                        else if (selectedEndTime < selectedStartTime.AddHours(0.5))
                                                        {
                                                            <p style="color: red;">The time is too close!</p>
                                                        }
                                                        else
                                                        {
                                                            var conflictingServices = Content.SelectedServicesWithQuantity
                                                            .Where(
                                                                s => s.SelectedRoom != null &&
                                                                s.SelectedRoom.StartDate < selectedEndTime &&
                                                                s.SelectedRoom.EndDate > selectedStartTime)
                                                            .ToList();

                                                            if (conflictingServices.Count > 1)
                                                            {
                                                                <p style="color: red;">Service conflicted: @string.Join(", ", conflictingServices.Select(cs => cs.Name))</p>

                                                            }
                                                        }
                                                    }
                                                </FluentGridItem>
                                            </FluentGrid>
                                            @*<FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal" >
                                                <FluentDatePicker Label="End Date" DisabledDateFunc="ValidateSelectDate" @bind-Value="@selectedService.SelectedRoom.EndDate" />
                                                <FluentTimePicker Label="End Time" @bind-Value="@selectedService.SelectedRoom.EndDate" />
                                            </FluentStack> *@
                                        }
                                        <FluentAutocomplete Id="doctor-and-nurse"
                                                            @ref="@Users"
                                                            TOption="User"
                                                            Width="100%"
                                                            Height="100px"
                                                            Placeholder="Search Doctor and Nurse"
                                                            Items="@Content.Users"
                                                            MaximumSelectedOptions="9"
                                                            OptionText="@(item => $"{item.FirstName ?? ""} {item.MiddleName ?? ""} {item.LastName ?? ""}")"
                                                            OptionStyle="min-height: 40px;"
                                                            ValueChanged="@OnSelectedUsersChanged"
                                                            Style="width: 100%;"
                                                            @bind-SelectedOptions="@selectedService.SelectedUsers">

                                            <LabelTemplate>
                                                Select Doctor and Nurse
                                            </LabelTemplate>

                                            @* Template used with each Selected items *@
                                            <SelectedOptionTemplate>
                                                <FluentPersona ImageSize="23px"
                                                               Image="@context.ProfileImageUrl"
                                                               Name="@($"{context.FirstName ?? ""} {context.LastName ?? ""}")"
                                                               Style="height: 27px;"
                                                               DismissTitle="Remove"
                                                               Status="PresenceStatus.Available"
                                                               OnDismissClick="@(async () => await this.Users.RemoveSelectedItemAsync(context))" />
                                                @* @($"{context.FirstName ?? ""} {context.LastName ?? ""}") *@
                                            </SelectedOptionTemplate>

                                            @* Template used with each Option items *@
                                            <OptionTemplate>
                                                <FluentPersona ImageSize="30px"
                                                               Image="@context.ProfileImageUrl"
                                                               Status="PresenceStatus.Available"
                                                               StatusSize="PresenceBadgeSize.Small"
                                                               Name="@($"{GetUserRole(context)} - {context.FirstName} {context.LastName}")" />
                                                @* @($"{GetUserRole(context)} - {context.FirstName} {context.LastName}") *@
                                            </OptionTemplate>

                                            @* Content display at the bottom of the Popup area *@
                                            <FooterContent>
                                                @if (!Content.SelectedServices.Any())
                                                {
                                                    <FluentLabel Style="font-size: 11px; text-align: center; width: 200px;">
                                                        No user found
                                                    </FluentLabel>
                                                }
                                            </FooterContent>
                                        </FluentAutocomplete>
                                        <FluentDivider Style="margin-top:5px; margin-bottom:5px;" />
                                    </FluentStack>
                                </FluentTab>
                            }
                        </FluentTabs>
                    </FluentCard>
                }
                else
                {
                    <FluentBadge Fill="somevalue" BackgroundColor="red" Color="white">
                            No selected services with quantity
                    </FluentBadge>
                }
            </FluentStack>
        </FluentGridItem>
    </FluentGrid>
</FluentDialogBody>
<FluentDialogFooter>
</FluentDialogFooter>

@code {
    [Parameter]
    public AddBillDialogParameter Content { get; set; } = default!;

    [Parameter]
    public string? SelectedServiceTab { get; set; } = null!;

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    private DateTime? selectedDate = DateTime.Now;

    public FluentAutocomplete<Service> Services { get; set; } = default!;

    public FluentAutocomplete<User> Users { get; set; } = default!;

    public FluentAutocomplete<SymptomModel> Symptoms { get; set; } = default!;

    bool isLoading = false;
    string userGuid = string.Empty;
    string requestGuid = string.Empty;
    string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Content.Deadline = DateTime.Now;
        ValidateBill();
        await base.OnInitializedAsync();
    }

    void OnSearch(OptionsSearchEventArgs<Service> e)
    {
        e.Items = Content.ServicesData.Where(x => x.Name.Contains(e.Text, StringComparison.OrdinalIgnoreCase))
                                      .OrderBy(x => x.Name);
    }

    void UpdateQuantityList()
    {
        Content.SelectedServicesWithQuantity = Content.SelectedServices?
            .Select(service => new SelectedService
            {
                Id = service.Id,
                Name = service.Name,
                Quantity = 1, // Default quantity is set to 1,
                CalculationType = service.CalculationType
            }).ToList() ?? new List<SelectedService>();
        if (Content.SelectedServicesWithQuantity.FirstOrDefault() is not null)
        {
            SelectedServiceTab = $"tab-{Content.SelectedServicesWithQuantity.FirstOrDefault()!.Name}";
        }
    }

    void OnTimeSelectedChanged(SelectedRoom room)
    {
        if (room.StartDate.HasValue && room.Duration is not null)
        {
            room.EndDate = room.StartDate.Value.AddMinutes(double.Parse(room.Duration));
        }
    }

    void OnSelectedUsersChanged()
    {

    }

    public string GetUserRole(User user)
    {
        if (MasterDataConstants.DoctorIds.Contains(user.Id))
        {
            return "Doctor";
        }
        else if (MasterDataConstants.NurseIds.Contains(user.Id))
        {
            return "Nurse";
        }
        else if (MasterDataConstants.FinancistIds.Contains(user.Id))
        {
            return "Financist";
        }
        else
        {
            return "Member";
        }
    }

    async Task CheckUserGuid()
    {
        errorMessage = string.Empty;
        Content.SelectedUser = null!;

        if (string.IsNullOrEmpty(userGuid))
        {
            errorMessage = "Please insert user ID";
            return;
        }

        isLoading = true;
        var userInfo = await UsersRepository.FindByGuidAsync(userGuid);
        if (userInfo is null)
        {
            errorMessage = "No user found please check your ID again";
            isLoading = false;
            return;
        }

        Content.SelectedUser = userInfo;

        ValidateUserGuid();

        isLoading = false;
    }

    async Task CheckRequestGuid()
    {
        errorMessage = string.Empty;
        Content.SelectedRequest = null!;

        if (string.IsNullOrEmpty(requestGuid))
        {
            errorMessage = "Please insert request ID";
            return;
        }

        isLoading = true;
        var request = await RequestRepository.FindByIdAsync(requestGuid);
        if (request is null)
        {
            errorMessage = "No user found please check request ID again";
            isLoading = false;
            return;
        }

        Content.SelectedRequest = request;
        userGuid = request.UserId;

        await CheckUserGuid();

        isLoading = false;
    }

    private void HandleDatePickerValueChanged(DateTime? newDate)
    {
        Content.Deadline = newDate;
        selectedDate = newDate;

        ValidateDeadline();
    }

    void ValidateUserGuid()
    {
        if (Content.SelectedUser is not null)
            Content!.IsUserIdValid = true;
        else if(string.IsNullOrEmpty(userGuid))
        {
            errorMessage = "Please insert user ID";
        }       
        else
        {
            errorMessage = "No user found please check your ID again";
        }
    }

    void ValidateDeadline()
    {
        if (Content.Deadline is not null)
            Content!.IsDeadlineValid = true;
    }

    bool ValidateSelectDate(DateTime date)
    {
        var selectedStartDate = Content.SelectedServicesWithQuantity.FirstOrDefault()?.SelectedRoom?.StartDate;

        if (date.AddDays(1) < DateTime.UtcNow)
        {
            return true;
        }
        else if (selectedStartDate.HasValue)
        {
            if (date.AddDays(1) < selectedStartDate.Value)
                return true;
        }

        return false;
    }

    void ValidateRoomSchedule()
    {
        Content.IsRoomValid!.Clear();
        if (Content.SelectedServicesWithQuantity.Any())
        {
            foreach (var item in Content.SelectedServicesWithQuantity)
            {
                var selectedRoom = item.SelectedRoom;
                if (selectedRoom != null)
                {
                    var selectedStartTime = selectedRoom.StartDate;
                    var selectedDuaration = selectedRoom.Duration;

                    if (selectedStartTime.HasValue && selectedDuaration is not null)
                    {
                        var selectedEndTime = selectedStartTime.Value.AddMinutes(double.Parse(selectedDuaration));

                        // Check if the end time is at least 30' after the start time
                        var minEndTime = selectedStartTime.Value.AddHours(0.5);
                        if (selectedEndTime >= minEndTime)
                        {
                            var conflictingRoom = Content.SelectedServicesWithQuantity
                                .Where(
                                    s => s.SelectedRoom != null &&
                                    s.SelectedRoom.StartDate < selectedRoom.EndDate &&
                                    s.SelectedRoom.EndDate > selectedRoom.StartDate)
                                .ToList();

                            if (conflictingRoom.Count > 1)
                            {
                                Content.IsRoomValid.Add(false);
                            }

                            Content.IsRoomValid.Add(true);
                        }
                        else
                        {
                            Content.IsRoomValid.Add(false);
                        }
                    }
                }
            }
        }
    }

    void ValidateBill()
    {
        ValidateUserGuid();
        ValidateDeadline();
        ValidateRoomSchedule();
        var isRoomValid = !Content.IsRoomValid!.Contains(false);

        if (Content.IsUserIdValid && isRoomValid && Content.IsDeadlineValid && Content.SelectedServicesWithQuantity.Any())
            Dialog!.TogglePrimaryActionButton(true);
    }

    async Task SelectRoomAsync(string name, string serviceId)
    {
        if (string.IsNullOrEmpty(name) || string.IsNullOrWhiteSpace(name)
            ||
            string.IsNullOrEmpty(serviceId) || string.IsNullOrWhiteSpace(serviceId))
            return;

        var roomInfo = Content.Rooms.FirstOrDefault(x => x.Name == name);
        if (roomInfo is null)
            return;


        var selectedService = Content.SelectedServicesWithQuantity.FirstOrDefault(x => x.Id.ToString() == serviceId);
        if (selectedService is null)
            return;

        selectedService.SelectedRoom = new()
        {
            ServiceId = serviceId,
            RoomId = roomInfo.Id
        };
    }
}
